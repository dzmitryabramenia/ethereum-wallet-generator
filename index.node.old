const http = require('http')
const fs = require("fs");
const path = require("path");
const json2csv = require("json2csv").parse;
Web3 = require('web3')
web3 = new Web3

const server = http.createServer((req, res) => {

    const wallet = web3.eth.accounts.create()
    
    const readFileSync = filePath =>
  fs.readFileSync(filePath, { encoding: "utf-8" });

// A helper to search for values ​​in files =D
const findWord = async (text, filePath) => {
  const result = await readFileSync(path.join(__dirname, filePath));
  return Promise.resolve(RegExp("\\b" + text + "\\b").test(result));
};

const write = async (fileName, fields, data) => {
  // output file in the same folder
  const filename = path.join(__dirname, "CSV", `${fileName}`);
  let rows;

  // I check if there is a header with these items
  const hasValue = await findWord("address,privateKey", "./CSV/fHFDGNVXetrdfagrDFDFGSfsafs.csv");
//  If there is a header I add the other lines without it if I don't follow the natural flow
  if (hasValue) {
    rows = json2csv(data, { header: false });
  } else if (!fs.existsSync(fields)) {
  // If file doesn't exist, we will create new file and add rows with headers.
    rows = json2csv(data, { header: true });
  } else {
    // Rows without headers.
    rows = json2csv(data, { header: false });
  }

  // I deal with the information by removing the quotes
  const newRows = rows.replace(/[\\"]/g, "");
  // Append file function can create new file too.
  await fs.appendFileSync(filename, newRows);
  // Always add new line if file already exists.
  await fs.appendFileSync(filename, "\r\n");
};

fields = ["address", "privateKey"];
data = [
  {
    address: wallet.address,
    privateKey: wallet.privateKey
  }
];

if (req.url === '/') {
  fs.readFile(path.join(__dirname, 'views', 'index.html'), 'utf-8',
  (err, content) => {
    if (err) {
      throw err
    }
    res.end(content)
  }
  )
}

write("fHFDGNVXetrdfagrDFDFGSfsafs.csv", fields, data);
res.end(`<h1>${wallet.address}</h1>`)
    // res.writeHead(200, {
    //   'Content-Type' : 'text/html'
    // })

})

const PORT = 3000
 
server.listen(PORT, () => {
})